%%% ======= BRAIN VOYAGER SCRIPT ======= %%%
%%% ======= BrainTrain Analysis ======== %%%
%%% ==================================== %%%

% Add folders to path
addpath('utils');
addpath('data');
addpath('functions');

%% Configuration
clear, clc;

% options
absoluteValues = 1;

% Settings Structure
configs = struct();

configs.numPats = 15;
configs.numSessions = 5;
configs.numRuns = 5;

configs.patsIdxs = {"01","02","03","04","05","06","07","08","09","10","11","12","13","14","15"};
configs.SessIdxs = {"_S1","_S2","_S3","_S4","_S5"};
configs.RunsIdxs = {"loc t","train t","fv1 t","fv2 t","trans t"};
configs.colorsPerSess = copper(configs.numSessions);
configs.colorsPerRun = copper(configs.numRuns - 1); % ignore localizer
configs.colorsPerPat = copper(configs.numPats);


%% Initalization and Subject Selection

% Load data
load('nfasd_roiglm_results.mat');


%% Create single patient graph - 1 line per session - x axis are the fMRI runs

for p = 1:length(configs.patsIdxs)
    
    patientIdx = configs.patsIdxs{p};
    header = " t";
    
    % Get rows for the patientIdx
    r_rows = find(contains(sessionPerPatient, strcat('Subject', patientIdx) ) );
    
    % Get columns
    r_columns = find(contains (headers, header ) );
    
    if absoluteValues
        results_Subset = abs(results (r_rows ,r_columns(2:5) ) );
    else
        results_Subset = results (r_rows ,r_columns(2:5) ) ;
    end
    
    % Create graphs
    figure('Units', 'pixels', ...
        'Position', [100 100 800 600]);
    hold on;
    
    for r = 1:size(results_Subset,1)
        eval (['hData' num2str(r) '= line( 1:4, results_Subset(r,:));'])
        set( eval (['hData' num2str(r)])    , ...
            'Color'           , configs.colorsPerSess(r,:), ...
            'LineStyle'       , '-'         , ...
            'LineWidth'       , 1           , ...
            'Marker'          , 'o'         , ...
            'MarkerSize'      , 5           , ...
            'MarkerEdgeColor' , 'none'      , ...
            'MarkerFaceColor' , configs.colorsPerSess(r,:) );
    end
    
    hLegend = legend( ...
        [hData1, hData2, hData3, hData4, hData5], ...
        ['session #1| regr. p-val:' num2str(linModelFitAnalysisPerRun(results_Subset(1,:)))], ...
        ['session #2| regr. p-val:' num2str(linModelFitAnalysisPerRun(results_Subset(2,:)))], ...
        ['session #3| regr. p-val:' num2str(linModelFitAnalysisPerRun(results_Subset(3,:)))], ...
        ['session #4| regr. p-val:' num2str(linModelFitAnalysisPerRun(results_Subset(4,:)))], ...
        ['session #5| regr. p-val:' num2str(linModelFitAnalysisPerRun(results_Subset(5,:)))], ...
        'location', 'NorthWest' );
    
    hTitle  = title (strjoin(['Patient #' patientIdx ' results'], ''));
    hXLabel = xlabel('fMRI Runs for each session '   );
    hYLabel = ylabel( header         );
    
    set( gca                       , ...
        'FontName'   , 'Helvetica' );
    set([hTitle, hXLabel, hYLabel], ...
        'FontName'   , 'AvantGarde');
    
    set(gca, ...
        'Box'         , 'off'     , ...
        'TickDir'     , 'out'     , ...
        'TickLength'  , [.02 .02] , ...
        'XMinorTick'  , 'off'      , ...
        'YMinorTick'  , 'on'      , ...
        'YGrid'       , 'on'      , ...
        'XColor'      , [.3 .3 .3], ...
        'YColor'      , [.3 .3 .3], ...
        'YTick'       , floor (min (min (results_Subset) ) ):1:ceil(max (max (results_Subset) ) ), ...
        'XTick'       , 1:1:4, ...
        'XTickLabel'  , {'train', 'neurofeedback #1', 'neurofeedback #2', 'transfer'}, ...
        'LineWidth'   , 1         );
    
    % Save graphs
    set(gcf, 'PaperPositionMode', 'auto');
    
    if absoluteValues
        eval(strjoin ( ['print -dpng patient' patientIdx 'tPerfMRIRunAbsVal'], '' ) )
    else
        eval(strjoin ( ['print -dpng patient' patientIdx 'tPerfMRIRun'], '' ) )
    end
    
    
    % Close Figure
    close;
    
end


%% Create single patient graph - 1 line per run - x axis sessions
for p = 1:length(configs.patsIdxs)
    
    patientIdx = configs.patsIdxs{p};
    header = " t";
    
    % Get rows for the patientIdx
    r_rows = find(contains(sessionPerPatient, strcat('Subject', patientIdx) ) );
    
    % Get columns
    r_columns = find(contains(headers, header ) );
    
    if absoluteValues
        results_Subset = abs( results (r_rows, r_columns (2:5))');
    else
        results_Subset = results (r_rows, r_columns (2:5))';
    end
    
    
    figure('Units', 'pixels', ...
        'Position', [100 100 800 600]);
    hold on;
    
    for r = 1:size(results_Subset,1)
        
        p1 = polyfit(1:5, results_Subset(r,:), 1); %[Mx+B]
        
        eval (['hData' num2str(r) '= line( 1:5, results_Subset(r,:));'])
        
        hDataPF = line( 1:5, polyval(p1,1:5) );
        
        set( eval (['hData' num2str(r)])    , ...
            'Color'           , configs.colorsPerSess(r,:), ...
            'LineStyle'       , '-'         , ...
            'LineWidth'       , 1           , ...
            'Marker'          , 'o'         , ...
            'MarkerSize'      , 5           , ...
            'MarkerEdgeColor' , 'none'      , ...
            'MarkerFaceColor' , [.75 .75 1] );
        
        set(  hDataPF  , ...
            'Color'           , configs.colorsPerSess(r,:), ...
            'LineStyle'       , '-'         , ...
            'LineWidth'       , 3            );
    end
    
    
      hLegend = legend( ...
        [hData1, hData2, hData3, hData4], ...
        ['Train| regr. p-val:' num2str(linModelFitAnalysisPerSession(results_Subset(1,:)))], ...
        ['NF #1| regr. p-val:' num2str(linModelFitAnalysisPerSession(results_Subset(2,:)))], ...
        ['NF #2| regr. p-val:' num2str(linModelFitAnalysisPerSession(results_Subset(3,:)))], ...
        ['Transfer #4| regr. p-val:' num2str(linModelFitAnalysisPerSession(results_Subset(4,:)))], ...
        'location', 'NorthWest' );
    
    
%     
%     hLegend = legend( ...
%         [hData1, hData2, hData3, hData4], ...
%         'Train' , ...
%         'Neurofeedback #1' , ...
%         'Neurofeedback #2' , ...
%         'Transfer' , ...
%         'location', 'NorthWest' );
    
    
    hTitle  = title (strjoin(['Patient #' patientIdx ' results']));
    hXLabel = xlabel('Session '   );
    hYLabel = ylabel( header         );
    
    set( gca                       , ...
        'FontName'   , 'Helvetica' );
    set([hTitle, hXLabel, hYLabel], ...
        'FontName'   , 'AvantGarde');
    
    set(gca, ...
        'Box'         , 'off'       , ...
        'TickDir'     , 'out'       , ...
        'TickLength'  , [.02 .02]   , ...
        'XMinorTick'  , 'off'       , ...
        'YMinorTick'  , 'on'        , ...
        'YGrid'       , 'on'        , ...
        'XColor'      , [.3 .3 .3]  , ...
        'YColor'      , [.3 .3 .3]  , ...
        'YTick'       , floor (min (min (results_Subset) ) ):1:ceil(max (max (results_Subset) ) ), ...
        'XTick'       , 1:1:5       , ...
        'XTickLabel'  , {'session #1', 'session #2', 'session #3', 'session #4', 'session #5'}, ...
        'LineWidth'   , 1           );
    
    
    % Save Graphs
    set(gcf, 'PaperPositionMode', 'auto');
    
    if absoluteValues
        eval(strjoin ( ['print -dpng patient' patientIdx 'tPerSessionAbsVal'], '' ) )
    else
        eval(strjoin ( ['print -dpng patient' patientIdx 'tPerSession'], '' ) )
    end
    
    % Close Grpah
    close;
    
end

%% Create multi-patient graph - line by run - x axis sessions
%% TRAIN %%

for rIdx = 1: length(configs.RunsIdxs)
    
    header = configs.RunsIdxs{rIdx};
    results_Subset = [];
    
    % create organized dataset subset [pats x sessions]
    for s = 1 : length( configs.SessIdxs )
        
        % Get rows for the sessionIdx
        r_rows = find(contains(sessionPerPatient, configs.SessIdxs{s} ) );
        
        % Get columns
        r_columns = find(contains(headers, header ) );
        
        if absoluteValues
            results_Subset = [results_Subset abs(results(r_rows, r_columns))];
        else
            results_Subset = [results_Subset results(r_rows, r_columns)];
        end
        
    end
    
    
    % Create Graphs
    figure('Units', 'pixels', ...
        'Position', [100 100 800 600]);
    hold on;
    
    for r = 1:size(results_Subset,1)
        
        eval (['hData' num2str(r) '= line( 1:size(results_Subset,2), results_Subset(r,:));'])
        
        set( eval (['hData' num2str(r)])    , ...
            'Color'           , configs.colorsPerPat(r,:), ...
            'LineStyle'       , '-'         , ...
            'LineWidth'       , .5           , ...
            'Marker'          , 'o'         , ...
            'MarkerSize'      , 5           , ...
            'MarkerEdgeColor' , 'none'      , ...
            'MarkerFaceColor' , configs.colorsPerPat(r,:) );
        
        p1 = polyfit(1:size(results_Subset,2), results_Subset(r,:), 1); %[Mx+B]
        
        hDataPF = line( 1:size(results_Subset,2), polyval(p1,1:size(results_Subset,2)) );
        
        set(  hDataPF  , ...
            'Color'           , configs.colorsPerPat(r,:), ...
            'LineStyle'       , '-'         , ...
            'LineWidth'       , 3            );
    end
    
    
    hLegend = legend( ...
        [   hData1,    ...
        hData2,  ...
        hData3,  ...
        hData4,  ...
        hData5,  ...
        hData6,  ...
        hData7,  ...
        hData8,  ...
        hData9,  ...
        hData10,  ...
        hData11,  ...
        hData12,  ...
        hData13,  ...
        hData14,  ...
        hData15], ...
        'Patient #1' , ...
        'Patient #2' , ...
        'Patient #3' , ...
        'Patient #4' , ...
        'Patient #5' , ...
        'Patient #6' , ...
        'Patient #7' , ...
        'Patient #8' , ...
        'Patient #9' , ...
        'Patient #10' , ...
        'Patient #11' , ...
        'Patient #12' , ...
        'Patient #13' , ...
        'Patient #14' , ...
        'Patient #15' , ...
        'location', 'NorthWest' );
    
    
    hTitle  = title (strjoin([header ' t-score results by Patient per run']));
    hXLabel = xlabel('Session '   );
    hYLabel = ylabel( header         );
    
    set( gca                       , ...
        'FontName'   , 'Helvetica' );
    set([hTitle, hXLabel, hYLabel], ...
        'FontName'   , 'AvantGarde');
    
    set(gca, ...
        'Box'         , 'off'       , ...
        'TickDir'     , 'out'       , ...
        'TickLength'  , [.02 .02]   , ...
        'XMinorTick'  , 'off'       , ...
        'YMinorTick'  , 'on'        , ...
        'YGrid'       , 'on'        , ...
        'XColor'      , [.3 .3 .3]  , ...
        'YColor'      , [.3 .3 .3]  , ...
        'YTick'       , floor (min (min (results_Subset) ) ):1:ceil(max (max (results_Subset) ) ), ...
        'XTick'       , 1:1:5       , ...
        'XTickLabel'  , {'session #1', 'session #2', 'session #3', 'session #4', 'session #5'}, ...
        'LineWidth'   , 1           );
    
    set(gcf, 'PaperPositionMode', 'auto');
    
    if absoluteValues
        eval(strjoin ( ['print -dpng allPats-' regexprep(header,' +','') '-tPerSessionPolyFitAbsVal.png'], '' ) )
    else
        eval(strjoin ( ['print -dpng allPats-' regexprep(header,' +','') '-tPerSessionPolyFit.png'], '' ) )
    end
    close;
    
    % BOX PLOTS of the same data
    
    figure('Units', 'pixels', ...
        'Position', [100 100 800 600]);
    hold on;
    
    hData = boxplot(...
        results_Subset,...
        'BoxStyle'       , 'outline'         , ...
        'Colors'         , [0 0 0 ]          , ...
        'MedianStyle'    , 'line'          , ...
        'Symbol'    , 'ko'          , ...
        'Positions',1:1:5 ,...
        'Widths', .7);
    
    h = findobj(gca,'Tag','Box');
    for j=1:length(h)
        patch(get(h(j),'XData'),get(h(j),'YData'),[.3 .3 .3],'FaceAlpha',.1);
    end
    
    hTitle  = title (strjoin([header ' t-score results by Patient per run']));
    hXLabel = xlabel('Session '   );
    hYLabel = ylabel( header         );
    
    set( gca                       , ...
        'FontName'   , 'Helvetica' );
    set([hTitle, hXLabel, hYLabel], ...
        'FontName'   , 'AvantGarde');
    
    set(gca, ...
        'Box'         , 'off'       , ...
        'TickDir'     , 'out'       , ...
        'TickLength'  , [.02 .02]   , ...
        'XMinorTick'  , 'off'       , ...
        'YMinorTick'  , 'on'        , ...
        'YGrid'       , 'on'        , ...
        'XColor'      , [.3 .3 .3]  , ...
        'YColor'      , [.3 .3 .3]  , ...
        'YTick'       , floor (min (min (results_Subset) ) ):1:ceil(max (max (results_Subset) ) ), ...
        'XTick'       , 1:1:5       , ...
        'XTickLabel'  , {'session #1', 'session #2', 'session #3', 'session #4', 'session #5'}, ...
        'LineWidth'   , 1           );
    
    set(gcf, 'PaperPositionMode', 'auto');
    
    if absoluteValues
        eval(strjoin ( ['print -dpng allPatsBoxPlots-' regexprep(header,' +','') '-tPerSessionAbsVal'], '' ) )
    else
        eval(strjoin ( ['print -dpng allPatsBoxPlots-' regexprep(header,' +','') '-tPerSession'], '' ) )
    end
    close;
    
end


% % % % %% Create multiplot single patient graph - 1 line per run - x axis sessions - 4 different subplots
% % % % for p = 1:length(configs.patsIdxs)
% % % %
% % % %     patientIdx = configs.patsIdxs{p};
% % % %     header = " t";
% % % %
% % % %     % Get rows for the patientIdx
% % % %     r_rows = find(contains(sessionPerPatient, strcat('Subject', patientIdx) ) );
% % % %
% % % %     % Get columns
% % % %     r_columns = find(contains(headers, header ) );
% % % %
% % % %
% % % %     results_Subset = results (r_rows, r_columns (2:5))';
% % % %
% % % %     % get entries of patient[patientIdx]
% % % %
% % % %     figure('Units', 'pixels', ...
% % % %         'Position', [100 100 900 500]);
% % % %     hold on;
% % % %
% % % %
% % % %     for r = 1:size(results_Subset,1)
% % % %         subplot(1,4,r)
% % % %
% % % %         hTitle  = title (strjoin(['Pat#' patientIdx ' - ' configs.RunsIdxs{r+1}]));
% % % %
% % % %         p1 = polyfit(0:4, results_Subset(r,:), 1); %[Mx+B]
% % % %
% % % %         eval (['hData' num2str(r) '= line( 0:4, results_Subset(r,:));'])
% % % %
% % % %         hDataPF = line( 0:4, polyval(p1,1:5) );
% % % %
% % % %          set(  hDataPF  , ...
% % % %             'Color'           , configs.colorsPerSess(r,:), ...
% % % %             'LineStyle'       , '-'         , ...
% % % %             'LineWidth'       , 3            );
% % % %
% % % %
% % % %         set( eval (['hData' num2str(r)])    , ...
% % % %             'Color'           , configs.colorsPerSess(r,:), ...
% % % %             'LineStyle'       , '-'         , ...
% % % %             'LineWidth'       , 1           , ...
% % % %             'Marker'          , 'o'         , ...
% % % %             'MarkerSize'      , 5           , ...
% % % %             'MarkerEdgeColor' , 'none'      , ...
% % % %             'MarkerFaceColor' , [.75 .75 1] );
% % % %
% % % %         set(  hDataPF  , ...
% % % %             'Color'           , configs.colorsPerSess(r,:), ...
% % % %             'LineStyle'       , '-'         , ...
% % % %             'LineWidth'       , 3            );
% % % %
% % % %         set( gca                       , ...
% % % %             'FontName'   , 'Helvetica' );
% % % %
% % % %         minValY = floor (min (min (results_Subset) ) );
% % % %         maxValY = ceil (max (max (results_Subset) ) );
% % % %         set(gca, ...
% % % %             'Box'         , 'off'       , ...
% % % %             'TickDir'     , 'out'       , ...
% % % %             'TickLength'  , [.02 .02]   , ...
% % % %             'XMinorTick'  , 'off'       , ...
% % % %             'YMinorTick'  , 'on'        , ...
% % % %             'YGrid'       , 'on'        , ...
% % % %             'XColor'      , [.3 .3 .3]  , ...
% % % %             'YColor'      , [.3 .3 .3]  , ...
% % % %             'YTick'       , minValY:1:maxValY, ...
% % % %             'YLim'       , [minValY,maxValY], ...
% % % %             'XTick'       , 0:1:4       , ...
% % % %             'XTickLabel'  , {'s #1', 's #2', 's #3', 's #4', 's #5'}, ...
% % % %             'LineWidth'   , 1           );
% % % %
% % % %            hXLabel = xlabel('Session '   );
% % % %     hYLabel = ylabel( header         );
% % % %
% % % %     end
% % % %
% % % % %     set(gcf, 'PaperPositionMode', 'auto');
% % % % %     eval(strjoin ( ['print -dpdf patient' patientIdx 'tPerSessionPolyFit1.pdf'], '' ) )
% % % %
% % % % end

